{"name": "test_place_order_register_checkout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input type=\"checkbox\" name=\"newsletter\" id=\"newsletter\" value=\"1\"> is not clickable at point (291, 680). Other element would receive the click: <iframe id=\"aswift_1\" name=\"aswift_1\" browsingtopics=\"true\" style=\"min-height: auto; max-height: none; min-width: auto; max-width: none; width: 1005px !important; height: 124px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"1005\" height=\"124\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20250814/r20190131/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-1677597403311019&amp;fa=1&amp;ifi=2&amp;uci=a!2&amp;btvi=1\" data-google-container-id=\"a!2\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"COngp-KPkY8DFQdeDwIdCecTkA\" data-load-complete=\"true\"></iframe>\n  (Session info: MicrosoftEdge=139.0.3405.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff758b081f5+23461]\n\t(No symbol) [0x0x7ff758a5c2e0]\n\tGetHandleVerifier [0x0x7ff758d80128+2611928]\n\t(No symbol) [0x0x7ff75887fd35]\n\t(No symbol) [0x0x7ff75887dce3]\n\t(No symbol) [0x0x7ff75887b75d]\n\t(No symbol) [0x0x7ff75887a928]\n\t(No symbol) [0x0x7ff75886fbfe]\n\t(No symbol) [0x0x7ff75889a6ba]\n\t(No symbol) [0x0x7ff75886f58d]\n\t(No symbol) [0x0x7ff75886f44d]\n\t(No symbol) [0x0x7ff75889a980]\n\t(No symbol) [0x0x7ff75886f58d]\n\t(No symbol) [0x0x7ff7588b754f]\n\t(No symbol) [0x0x7ff75889a423]\n\t(No symbol) [0x0x7ff75886ea86]\n\t(No symbol) [0x0x7ff75886dd11]\n\t(No symbol) [0x0x7ff75886e8b3]\n\t(No symbol) [0x0x7ff75896dd3d]\n\t(No symbol) [0x0x7ff75897b0c8]\n\tGetHandleVerifier [0x0x7ff758be803b+940523]\n\tGetHandleVerifier [0x0x7ff758bf0d91+976705]\n\t(No symbol) [0x0x7ff758a69ed1]\n\t(No symbol) [0x0x7ff758a628b4]\n\t(No symbol) [0x0x7ff758a62a03]\n\t(No symbol) [0x0x7ff758a544a6]\n\tBaseThreadInitThunk [0x0x7ff8085de8d7+23]\n\tRtlUserThreadStart [0x0x7ff80899c34c+44]", "trace": "driver = <selenium.webdriver.edge.webdriver.WebDriver (session=\"a0944690509cc3c27df78df780e08545\")>\n\n    def test_place_order_register_checkout(driver):\n        payment_data = {\n            \"name\": \"Test User\",\n            \"card_number\": \"4111111111111111\",\n            \"cvc\": \"123\",\n            \"month\": \"12\",\n            \"year\": \"2025\"\n        }\n    \n        # Initialize page object\n        place_order_page = place_order_register_checkout_page(driver)\n    \n        # Perform actions\n        place_order_page.add_product_and_checkout()\n>       place_order_page.register_and_place_order(payment_data)\n\nselenium_tests\\pytest_pages\\test_place_order_register_checkout.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nselenium_tests\\pages\\place_order_register_checkout_page.py:51: in register_and_place_order\n    register.user_form()\nselenium_tests\\pages\\register_page_valid.py:32: in user_form\n    self.driver.find_element(By.CSS_SELECTOR,\"#newsletter\").click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:454: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000209DAD48D60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...[0x0x7ff758a544a6]\\\\n\\\\tBaseThreadInitThunk [0x0x7ff8085de8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ff80899c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input type=\"checkbox\" name=\"newsletter\" id=\"newsletter\" value=\"1\"> is not clickable at point (291, 680). Other element would receive the click: <iframe id=\"aswift_1\" name=\"aswift_1\" browsingtopics=\"true\" style=\"min-height: auto; max-height: none; min-width: auto; max-width: none; width: 1005px !important; height: 124px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"1005\" height=\"124\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20250814/r20190131/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-1677597403311019&amp;fa=1&amp;ifi=2&amp;uci=a!2&amp;btvi=1\" data-google-container-id=\"a!2\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"COngp-KPkY8DFQdeDwIdCecTkA\" data-load-complete=\"true\"></iframe>\nE         (Session info: MicrosoftEdge=139.0.3405.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff758b081f5+23461]\nE       \t(No symbol) [0x0x7ff758a5c2e0]\nE       \tGetHandleVerifier [0x0x7ff758d80128+2611928]\nE       \t(No symbol) [0x0x7ff75887fd35]\nE       \t(No symbol) [0x0x7ff75887dce3]\nE       \t(No symbol) [0x0x7ff75887b75d]\nE       \t(No symbol) [0x0x7ff75887a928]\nE       \t(No symbol) [0x0x7ff75886fbfe]\nE       \t(No symbol) [0x0x7ff75889a6ba]\nE       \t(No symbol) [0x0x7ff75886f58d]\nE       \t(No symbol) [0x0x7ff75886f44d]\nE       \t(No symbol) [0x0x7ff75889a980]\nE       \t(No symbol) [0x0x7ff75886f58d]\nE       \t(No symbol) [0x0x7ff7588b754f]\nE       \t(No symbol) [0x0x7ff75889a423]\nE       \t(No symbol) [0x0x7ff75886ea86]\nE       \t(No symbol) [0x0x7ff75886dd11]\nE       \t(No symbol) [0x0x7ff75886e8b3]\nE       \t(No symbol) [0x0x7ff75896dd3d]\nE       \t(No symbol) [0x0x7ff75897b0c8]\nE       \tGetHandleVerifier [0x0x7ff758be803b+940523]\nE       \tGetHandleVerifier [0x0x7ff758bf0d91+976705]\nE       \t(No symbol) [0x0x7ff758a69ed1]\nE       \t(No symbol) [0x0x7ff758a628b4]\nE       \t(No symbol) [0x0x7ff758a62a03]\nE       \t(No symbol) [0x0x7ff758a544a6]\nE       \tBaseThreadInitThunk [0x0x7ff8085de8d7+23]\nE       \tRtlUserThreadStart [0x0x7ff80899c34c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": "Failure Screenshot", "source": "216debf0-49a5-45cb-bccf-ade3ee4aefb3-attachment.png", "type": "image/png"}, {"name": "log", "source": "83c81a61-f613-4c9a-9c49-e71f4fcee868-attachment.txt", "type": "text/plain"}], "start": 1755408887100, "stop": 1755408909705, "uuid": "7696cebd-1201-491c-9150-af5e3d4236e7", "historyId": "345f2e6fcac832155eff338b7bdd19e5", "testCaseId": "345f2e6fcac832155eff338b7bdd19e5", "fullName": "selenium_tests.pytest_pages.test_place_order_register_checkout#test_place_order_register_checkout", "labels": [{"name": "parentSuite", "value": "selenium_tests.pytest_pages"}, {"name": "suite", "value": "test_place_order_register_checkout"}, {"name": "host", "value": "MSI"}, {"name": "thread", "value": "9240-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "selenium_tests.pytest_pages.test_place_order_register_checkout"}], "titlePath": ["selenium_tests", "pytest_pages", "test_place_order_register_checkout.py"]}